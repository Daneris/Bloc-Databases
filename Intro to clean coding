**Exercises**

Please submit your answers to the following questions in a file called intro_to_clean_coding_answers.txt.

>1. In your own words, explain what clean code is and why it is important.

Clean code is easy to read and understand. It is especially important when working as a professional developer. Even if you are working on a project on your own, eventually at some point in time, someone will need to look at your code and or update it. If it's not clean, it will cause them to spend time figuring things out and they may even inadvertently introduce bugs while making updates.

>2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A microwave is probably an appliance with a simple computer that most of us use at least once a week. A microwave computer that wasn't thoroughly tested and didn't have fail safes could easily start a fire that could be deadly.

>3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

**No I would not consider it clean code. Below is the original.**

  
```
FUNCTION do(x, y) // Creating a new function
IF y = "F" THEN // Check  if y is equal "F"
SET z to (x−32) * (5/9) // Formula to  convert  degrees fahrenheit to celsius

PRINT z // Print result

ELSE  IF y = "C" THEN // If y not equal to "F", check  if equal to "C"
SET z to x * 1.8000 + 32.00 // Formula to  convert  degrees celsius to fahrenheit

PRINT z // Print result

END  IF

END  FUNCTION
```
  
  

**Edited version:**

 - Updated name of function to be clear and follow conventions
 - Updated variable names to actually describe what they represent

```
FUNCTION convertTemp(temperature, scale)         
 IF scale = "F" THEN               
  SET converted to (temperature−32) * (5/9)       
  PRINT converted                       
 ELSE IF scale = "C" THEN          
  SET converted to temperature * 1.8000 + 32.00   
  PRINT converted                     
 END IF
END FUNCTION
```

  
  
 

4.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

**Original code:**
```
FUNCTION  calcPercent(sum, total)
  IF  NOT(total = 0) THEN
 SET percentage to sum / total * 100
	 ELSE
	PRINT "Sorry, cannot divide by 0"
   END  IF
	PRINT percentage
END  FUNCTION
```
  

No, not entirely because the name of the function should not include any abbreviations. Otherwise everything else looks good. The names of the variables correspond to what they represent. I updated the name of the function from calcPercent to calculatePercent.

**Updated version:**

```
FUNCTION calculatePercent(sum, total)
 IF NOT(total = 0) THEN
  SET percentage to sum / total * 100
 ELSE 
  PRINT "Sorry, cannot divide by 0"
 END IF
  PRINT percentage
END FUNCTION
```

  
  

5.Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

**Original code:**
```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF

END FUNCTION
```





**Updates made:**
 - Changed name of original function to calcuateChangeDue.
 - Set  "subTotal * discountRate + (subTotal * tax)" equal to TOTAL and used the variable anywhere the calculation was needed.
 - removed call to getPayment

```
FUNCTION calculateChangeDue(subTotal, discountRate, paymentType)
 SET TOTAL to subTotal * discountRate + (subTotal * tax)  
  PRINT "Your total due is: " Total
  
   IF paymentType = 'CASH' THEN
	PRINT "Change due: " + amount - Total
   ELSE IF paymentType = 'CREDIT CARD' THEN
	PRINT "Your credit card has been charged: " + subTotal * discountRate + Total
   END IF
END FUNCTION
```
  

  

b. The following function checks out a book if there are no issues with the guest's account.

**Updates made:**

  
```
FUNCTION checkoutBook(book, guest)
   IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
	APPEND book to guest.books
	SET book.status to "Checked Out"
   ELSE
	PRINT "Your books have been issued."	
   END IF
END FUNCTION
```





c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.




**Updates made:**

 - Created three separate classes

```
CLASS CheckBalance

 FUNCTION displayBalance 
  PRINT balance

   END

 END FUNCTION

```


```
CLASS WithdrawDeposit

 FUNCTION deposit(amount)
  SET balance to balance + amount 
 END FUNCTION



FUNCTION withdraw(amount) 
 IF balance > amount 
  THEN SET balance to balance - amount 
 END 
END FUNCTION
```
  


```
CLASS CreditCardOffers
 FUNCTION creditCardOffer
  IF NOT(customer.hasCreditCard) THEN
   CALL offerCreditCard
  END
END FUNCTION


	FUNCTION checkStatus
	 IF NOT(customer.hasCheckingAccount) THEN
      CALL offerCheckingAccount
	 END

	END FUNCTION
```

.... .... ....

END Programming Questions You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

>  Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example: [10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5. [1,1] returns 2 because 2 is not a perfect square. The square root of 2 is approximately 1.414213562373095.

```
  function isPerfectSquare(array) {
  	let total = 0;
  	
  	for(let i =0; i <array.length; i++) {
  	  total = array[i] + total;
  		}

    if (Math.sqrt(total) % 1 === 0) {
      return Math.sqrt(total);
    }else {
      return total;
      }
    
  	};
    
    console.log(isPerfectSquare([2,3,4,5]));
    console.log(isPerfectSquare([1,1]));
    console.log(isPerfectSquare([1,3,1]));
```

>  Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


```
function findDuplicate(array) {
  for(var i = 0; i <= array.length; i++) {
     for(var j = i; j <= array.length; j++) {
        if(i != j && array[i] == array[j]) {
           return true;
            }
        }
    }
   return false;
};

console.log(findDuplicate([2,33,3,33,44,5,1,0]));
console.log(findDuplicate([2,1,0,4999,4,87,019,4]));
```
 

Extra Credit

1.  Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

